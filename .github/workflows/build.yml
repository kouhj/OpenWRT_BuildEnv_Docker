# This is a basic workflow to help you get started with Actions

env:
  DK_IMAGE_NAME: "openwrt-buildenv"
  DK_REGISTRY: ${{secrets.docker_registry}}
  DK_USERNAME: ${{secrets.docker_username}}
  DK_PASSWORD: ${{secrets.docker_password}}
  TMATE_ENCRYPT_PASSWORD: ${{secrets.TMATE_ENCRYPT_PASSWORD}}

name: Build Docker

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build-Docker-Iamge:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Build Docker
        id: build
        continue-on-error: true
        run: |
          docker build -t ${{env.DK_IMAGE_NAME}} .
          echo ::set-output name=status::sucess

      # Runs a set of commands using the runners shell
      - name: Commit Built Docker
        id: commit
        continue-on-error: true
        if: steps.build.outputs.status == 'success'
        run: |
          bash -x scripts/upload-docker.sh
          echo ::set-output name=status::sucess

      - name: "[Debug] Wait for SSH connection (timeout 5min)"
        if: steps.build.outputs.status != 'success' || steps.commit.outputs.status != 'success'
        env:
          TIMEOUT_MIN: 5
        uses: tete1030/safe-debugger-action@dev
